{
  "faustPrograms" : {
    "-KQAR9MLgqaLBz2NUMOJ" : {
      "code" : "declare name \"Flappy Flute\";\ndeclare author \"ER\";// Adapted from \"Nonlinear WaveGuide Flute\" by Romain Michon (rmichon@ccrma.stanford.edu)\n\nimport(\"music.lib\");\nimport(\"instrument.lib\");\nimport(\"effect.lib\");\n\n/* =============== DESCRIPTION ======================== :\n\n- Flute turning into a flapping bird\n- Head = Reverberation / High frequencies\n- Tilting and jerking = looking for different sounds around head and back\n- Bottom = Low frequencies\n- Swing (bottom to head) = glissando (nice when followed with Back)\n- Back = Echo\n- Left = Slow rhythm/Silence\n- Right = Flapping bird\n\n*/\n\n//==================== INSTRUMENT =======================\n\nflute = (_ <: (flow + *(feedBack1) : embouchureDelay: poly) + *(feedBack2) : reflexionFilter)~(boreDelay) : NLFM : *(env2)*gain:_;\n\nprocess = vgroup(\"Flappy Flute\", flute : echo <: instrReverbFlute);\n\n\n//==================== GUI SPECIFICATION ================\n\nfreq = hslider(\"[1]Frequency[unit:Hz][tooltip:Tone frequency][acc:1 0 -10 0 10]\", 440,247,1200,1):smooth(0.999);\npressure = hslider(\"h:[3]Parameters/ Pressure[style:knob][acc:0 1 -10 0 10]\", 1, 0.6, 1, 0.01):smooth(0.999):min(1):max(0.6);\nbreathAmp = hslider(\"h:[3]Parameters/Breath Noise[style:knob][acc:0 0 -10 0 10]\", 0.01, 0.01, 0.2, 0.01):smooth(0.999):min(0.2):max(0.01);\n\ngate = pulsaflute.gate;\nvibratoFreq = 5;//hslider(\"h:Parameters/Vibrato Frequency[style:knob][unit:Hz]\",5,1,15,0.1);\nenv1Attack = 0.05;//hslider(\"h:Parameters/Envelope Attack[unit:s][style:knob][tooltip:Pressure envelope attack duration]\",0.05,0.05,0.2,0.01);\n\n//----------------------- Echo ----------------------------------------\n\necho = +~ @(22050) *(feedback);\nfeedback = hslider(\"h:[4]Reverberation/Echo Intensity[style:knob][acc:2 0 -10 10 0 0.001] \", 0.001, 0.001, 0.65, 0.001):smooth(0.999):min(0.65):max(0.001);\n\n//----------------------- Pulsar --------------------------------------\n\n\npulsaflute = environment{\n\ngate = phasor_bin(1) :-(0.001):pulsar;\nratio_env = (0.5);\nfade = (0.5);\nspeed = hslider (\"h:[2]Instrument/[2]Speed (Granulator)[style:knob][acc:0 0 -10 0 10]\", 4,1,16,0.0001):lowpass(1,1);\nproba = hslider (\"h:[2]Instrument/[3]Probability (Granulator)[unit:%][style:knob][acc:1 1 -10 0 10]\", 88,60,100,1) *(0.01) : lowpass(1,1);\n\nphasor_bin (init) =  (+(float(speed)/float(SR)) : fmod(_,1.0)) ~ *(init);\npulsar = _<:(((_)<(ratio_env)):@(100))*((proba)>((_),(noise:abs):latch)); \n\n};\n\n//-------------------- Non-Variable Parameters -----------\nN = 27;\n\ngain = hslider(\"h:[2]Instrument/[1]Volume[style:knob][acc:0 0 -12 0 12]\", 1, 0.75, 4, 0.01):min(4):max(0.75);\ntypeModulation = 0;\nnonLinearity = 0;\nfrequencyMod = 220;\nnonLinAttack = 0.1;\nvibratoGain = 0.1;\nvibratoBegin = 0.1;\nvibratoAttack = 0.5;\nvibratoRelease = 0.2;\npressureEnvelope = 0;\nenv1Decay = 0.2;\nenv2Attack = 0.05;\nenv2Release = 0.05;\nenv1Release = 0.05;\n\n\n\n//==================== SIGNAL PROCESSING ================\n\n//----------------------- Nonlinear filter ----------------------------\n//nonlinearities are created by the nonlinear passive allpass ladder filter declared in filter.lib\n\n//nonlinear filter order\nnlfOrder = 6; \n\n//attack - sustain - release envelope for nonlinearity (declared in instrument.lib)\nenvelopeMod = asr(nonLinAttack,100,0.1,gate);\n\n//nonLinearModultor is declared in instrument.lib, it adapts allpassnn from filter.lib \n//for using it with waveguide instruments\nNLFM =  nonLinearModulator((nonLinearity : smooth(0.999)),envelopeMod,freq,\n     typeModulation,(frequencyMod : smooth(0.999)),nlfOrder);\n\n//----------------------- Synthesis parameters computing and functions declaration ----------------------------\n\n//Loops feedbacks gains\nfeedBack1 = 0.4;\nfeedBack2 = 0.4;\n\n//Delay Lines\nembouchureDelayLength = (SR/freq)/2-2;\nboreDelayLength = SR/freq-2;\nembouchureDelay = fdelay(4096,embouchureDelayLength);\nboreDelay = fdelay(4096,boreDelayLength);\n\n//Polinomial\npoly = _ <: _ - _*_*_;\n\n//jet filter is a lowwpass filter (declared in filter.lib)\nreflexionFilter = lowpass(1,2000);\n\n//----------------------- Algorithm implementation ----------------------------\n\n//Pressure envelope\nenv1 = adsr(env1Attack,env1Decay,90,env1Release,(gate | pressureEnvelope))*pressure*1.1; \n\n//Global envelope\nenv2 = asr(env2Attack,100,env2Release,gate)*0.5;\n\n//Vibrato Envelope\nvibratoEnvelope = envVibrato(vibratoBegin,vibratoAttack,100,vibratoRelease,gate)*vibratoGain; \n\nvibrato = osc(vibratoFreq)*vibratoEnvelope;\n\nbreath = noise*env1;\n\nflow = env1 + breath*breathAmp + vibrato;\n\ninstrReverbFlute = zita_rev1_stereo(rdel,f1,f2,t60dc,t60m,fsmax),_,_ <: _,!,_,!,!,_,!,_ : +,+\n       with{\n       roomSize = hslider(\"h:[4]Reverberation/Reverberation Room Size (InstrReverb)[style:knob][acc:1 0 -30 0 16]\", 0.72,0.05,2,0.01):min(2):max(0.05);\n       rdel = 20;\n       f1 = 200;\n       f2 = 6000;\n       t60dc = roomSize*3;\n       t60m = roomSize*2;\n       fsmax = 48000;\n       };",
      "public" : false,
      "staffPick" : true,
      "starCount" : 0,
      "title" : "Flappy Flute"
    },
    "-KQAROdQz_MWkRSeg6TI" : {
      "code" : "declare name \"Faust Oscillator Library\";\ndeclare author \"Julius O. Smith (jos at ccrma.stanford.edu)\";\ndeclare copyright \"Julius O. Smith III\";\ndeclare version \"1.11\";\ndeclare license \"STK-4.3\"; // Synthesis Tool Kit 4.3 (MIT style license)\n\n// Slight modification by Michael Bylstra to use \"freq\" control label instead of \"frequency\"\n\nimport(\"oscillator.lib\");\n\nvirtual_analog_oscillator_demo_ = signal with {\n  osc_group(x) = vgroup(\"[0] VIRTUAL ANALOG OSCILLATORS\n    [tooltip: See Faust's oscillator.lib for documentation and references]\",x);\n\n  // Signals\n  saw = (amp/3) *\n    (sawtooth(sfreq) + sawtooth(sfreq*detune1) + sawtooth(sfreq*detune2));\n  sq = (amp/3) *\n    (square(sfreq) + square(sfreq*detune1) + square(sfreq*detune2));\n  tri = (amp/3) *\n    (triangle(sfreq) + triangle(sfreq*detune1) + triangle(sfreq*detune2));\n  pt = (amp/3) * (pulsetrain(sfreq,ptd)\n                + pulsetrain(sfreq*detune1,ptd)\n                + pulsetrain(sfreq*detune2,ptd));\n  ptN = (amp/3) * (pulsetrainN(N,sfreq,ptd)\n                + pulsetrainN(N,sfreq*detune1,ptd)\n                + pulsetrainN(N,sfreq*detune2,ptd)) with {N=3;};\n  pn = amp * pink_noise;\n\n  signal = ssaw*saw + ssq*sq + stri*tri\n  \t   + spt*((ssptN*ptN)+(1-ssptN)*pt)\n\t   + spn*pn + sei*_;\n\n  // Signal controls:\n  signal_group(x) = osc_group(hgroup(\"[0] Signal Levels\",x));\n  ssaw = signal_group(vslider(\"[0] Sawtooth [style:vslider]\",1,0,1,0.01));\n\n  pt_group(x) = signal_group(vgroup(\"[1] Pulse Train\",x));\n  ssptN = pt_group(checkbox(\"[0] Order 3\n    [tooltip: When checked, use 3rd-order aliasing suppression (up from 2)\n     See if you can hear a difference with the freq high and swept]\"));\n  spt = pt_group(vslider(\"[1] [style:vslider]\",0,0,1,0.01));\n  ptd = pt_group(vslider(\"[2] Duty Cycle [style:knob]\",0.5,0,1,0.01))\n        : smooth(0.99);\n\n  ssq = signal_group(vslider(\"[2] Square [style:vslider]\",0,0,1,0.01));\n  stri = signal_group(vslider(\"[3] Triangle [style:vslider]\",0,0,1,0.01));\n  spn = signal_group(vslider(\n      \"[4] Pink Noise [style:vslider]\n       [tooltip: Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the same total power in every octave (uses only amplitude controls)]\",0,0,1,0.01));\n  sei = signal_group(vslider(\"[5] Ext Input [style:vslider]\",0,0,1,0.01));\n\n  // Signal Parameters\n  knob_group(x) = osc_group(hgroup(\"[1] Signal Parameters\", x));\n  af_group(x) = knob_group(vgroup(\"[0]\", x));\n  ampdb  = af_group(hslider(\"[1] Mix Amplitude [unit:dB] [style:hslider]\n    [tooltip: Sawtooth waveform amplitude]\",\n    -20,-120,10,0.1));\n  amp = ampdb : db2linear : smooth(0.999);\n\n  freq = nentry(\"freq\", 440, 20, 20000, 1);\n\n  detune1 = 1 - 0.01 * knob_group(\n    vslider(\"[3] Detuning 1 [unit:%%] [style:knob]\n      [tooltip: Percentange frequency-shift up or down for second oscillator]\",\n      -0.1,-10,10,0.01));\n  detune2 = 1 + 0.01 * knob_group(\n    vslider(\"[4] Detuning 2 [unit:%%] [style:knob]\n      [tooltip: Percentange frequency-shift up or down for third detuned oscillator]\",\n    +0.1,-10,10,0.01));\n  portamento = knob_group(\n    vslider(\"[5] Portamento [unit:sec] [style:knob] [scale:log]\n      [tooltip: Portamento (frequency-glide) time-constant in seconds]\",\n      0.1,0.001,10,0.001));\n  sfreq = freq : smooth(tau2pole(portamento));\n};\n\nprocess = virtual_analog_oscillator_demo_;\n",
      "public" : false,
      "staffPick" : true,
      "starCount" : 0,
      "title" : "Analog Oscillators"
    },
    "-KQAR_UYQ5KUh2ts7GnK" : {
      "code" : "declare name \"bird\";\ndeclare author \"Pierre Cochard\";\n\n/* Modifications by Grame July 2014 */\n\nimport(\"music.lib\");\nimport(\"oscillator.lib\");\nimport(\"effect.lib\");\n\n/* =============== DESCRIPTION ================= :\n\n- Bird singing generator.\n- Head = Reverberation, birds heard from far away.\n- Bottom = Maximum proximity of the birds.\n- Right = maximum speed of whistles.\n- Left = minimum speed, birds rarely heard.\n\n*/\n\n\n// PROCESS - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nprocess = hgroup(\"Birds\", mainOsc(noteTrig : rdm(72,94) : mtof , noteTrig) * envWrapper(noteTrig, ampEnv, amp_xp(2510)) : lowpass(1, 2000) *(0.8) <: _,_, (rdmPanner : panSte) : panConnect : *,* : reverb);\n\n\n\n// AUTO TRIGGER\n\nautoTrig = beat(t) * (abs(noise) <= p) : trigger(48) //tempo(2.5*t))\n\twith {\n\t\tt = hslider(\"[1]Speed (Granulator)[style:knob][acc:0 0 -10 0 10]\", 240, 120, 480, 0.1) : smooth(0.999);\n\t\tp = hslider(\"[2]Probability (Granulator)[unit:%][style:knob][acc:1 1 -10 0 10]\", 50, 25, 100, 1)*(0.01) : smooth(0.999);\n\t\ttrigger(n) \t= upfront : release(n) : >(0.0) with {\n\t\t\tupfront(x) \t= (x-x') > 0.0;\n\t\t\tdecay(n,x)\t= x - (x>0.0)/n;\n\t\t\trelease(n)\t= + ~ decay(n);\n\t\t};\n\t};\n\n\n// BIRD TRIGGER\n\nnoteTrig = autoTrig : min(1.0);\n//noteTrig = autoTrig;\n\n\n// OSCILLATORS - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/* base */\ncarrierOsc(freq) = osci(freq);\nmodOsc(freq) = triangleN(3,freq);\n\n/* fm oscillator */\nmainOsc(freq,trig) = freq <: +(*(harmRatio <: +(*(envWrapper(trig,harmEnv,harm_xp(1700))))) : modOsc : *(modIndex <: +(*(envWrapper(trig,modIndexEnv,modIndex_xp(550)))))) <: +(*(envWrapper(trig,freqEnv,freq_xp(943)))) : carrierOsc;\n\nenvWrapper(trig,env,sus) = trig : mstosamps(rdm(100,3000)), sus : hitLength : env;\n\n\n// FIXED PARAMETERS - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/* fm */\nharmRatio = 0.063;\nmodIndex = 3.24;\n\n\n// TIME FUNCTIONS - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nmetro(ms) =  (%(+(1),mstosamps(ms))) ~_ : ==(1);\nmstosamps(ms) = ms : /(1000) * SR : int;\nrdmInc = _ <: @(1), @(2) : + : *(2994.2313) : int : +(38125);\nrdm(rdmin,rdmax) = _,(fmod(_,rdmax - rdmin : int) ~ rdmInc : +(rdmin)) : gater : -(1) : abs;\ngater = (_,_,_ <: !,_,!,_,!,!,!,!,_ : select2) ~_;\n\n\n// MIDI RELATED - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/* midi pitch */\nmtof(midinote) = pow(2,(midinote - 69) / 12) * 440;\n\n\n// ENVELOPPES - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/* envelope \"reader\" (phaser) */\n\nhitLength(length,sustain) = *((==(length,@(length,1))), +(1))~_ <: gater(<(sustain));\n\n/* amplitude envelope */\n\nampEnvbpf = bpf.start(0, 0) :\n\tbpf.point(amp_xp(60.241), 1.) :\n\tbpf.point(amp_xp(461.847), 0.) :\n\tbpf.point(amp_xp(582.329), 0.928) :\n\tbpf.point(amp_xp(682.731), 0.5) :\n\tbpf.point(amp_xp(983.936), 0.) :\n\tbpf.point(amp_xp(1064.257), 0.) :\n\tbpf.point(amp_xp(1345.382), 0.) :\n\tbpf.point(amp_xp(1526.105), 0.) :\n\tbpf.point(amp_xp(1746.988), 0.) :\n\tbpf.point(amp_xp(1827.309), 0.) :\n\tbpf.point(amp_xp(2088.353), 0.) :\n\tbpf.point(amp_xp(2188.755), 0.) : /* sustain point */\n\tbpf.end(amp_xp(2510.040), 0.);\n\nampEnv = ampEnvbpf : smooth(0.999) : lowpass(1, 3000);\namp_xp(x) = x * SR / 1000. * ampEnv_speed;\nampEnv_speed = noteTrig : rdm(0,2000) : /(1000);\n\n/* freq envelope */\n\nfreqEnvbpf =  bpf.start(0, 0) :\n\tbpf.point(freq_xp(147.751), 1.) :\n\tbpf.point(freq_xp(193.213), 0.) :\n\tbpf.point(freq_xp(318.233), yp) :\n\tbpf.point(freq_xp(431.888), 0.) :\n\tbpf.point(freq_xp(488.715), 0.434) :\n\tbpf.point(freq_xp(613.735), yp) :\n\tbpf.point(freq_xp(659.197), 1.) :\n\tbpf.point(freq_xp(716.024), yp) :\n\tbpf.point(freq_xp(806.948), 1.) :\n\tbpf.point(freq_xp(829.679), yp) : /* sustain point */\n\tbpf.end(freq_xp(943.333), 0.);\n\nfreqEnv = freqEnvbpf : smooth(0.999) : lowpass(1, 3000);\nfreq_xp(x) = x * SR / 1000. * freqEnv_speed;\nfreqEnv_speed = noteTrig : rdm(0,2000) : /(1000);\nyp = noteTrig : rdm(0,1000) : /(1000);\n\n/* harmRatio envelope */\n\nharmEnvbpf = bpf.start(0, 0.) :\n\tbpf.point(harm_xp(863.454), 0.490) :\n\tbpf.point(harm_xp(865), 0.) :\n\tbpf.point (harm_xp(1305.221), 1.) :\n\tbpf.point(harm_xp(1646.586), 0.) : /* sustain point */\n\tbpf.end(harm_xp(1700), 0.);\n\nharmEnv = harmEnvbpf : smooth(0.999) : lowpass(1, 3000);\nharm_xp(x) = x * SR / 1000. * harmEnv_speed;\nharmEnv_speed = noteTrig : rdm(0,2000) : /(1000);\n\n/* modIndex envelope */\n\nmodIndexEnvbpf = bpf.start(0, 0.) :\n\tbpf.point(modIndex_xp(240.964), 0.554) :\n\tbpf.point(modIndex_xp(502.068), 0.) : /* sustain point */\n\tbpf.end(modIndex_xp(550), 0.);\n\nmodIndexEnv = modIndexEnvbpf : smooth(0.999) : lowpass(1, 3000);\nmodIndex_xp(x) = x * SR / 1000. * modIndexEnv_speed;\nmodIndexEnv_speed = noteTrig : rdm(0,2000) : /(1000);\n\n\n// PANNER STEREO - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\npanSte = _ <: -(1,_),_ : sqrt,sqrt;\nrdmPanner = noteTrig : rdm(0,1000) : /(1000);\n\n/* cable crosser = 1,3 & 2,4 */\npanConnect = _,_,_,_ <: _,!,!,!,!,!,_,!,!,_,!,!,!,!,!,_;\n\n\n// REVERB BASED OF ZITA - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nreverb(x,y) = zita_rev1_stereo(rdel,f1,f2,t60dc,t60m,fsmax,x,y)\n\t  : out_eq : dry_wet(x,y) : out_level\nwith {\n\n  fsmax = 48000.0;  // highest sampling rate that will be used\n\n  rdel = 60;\n\n  f1 = 200;\n\n  t60dc = 3;\n\n  t60m = 2;\n\n  f2 = 6000;\n\n  out_eq = pareq_stereo(eq1f,eq1l,eq1q) : pareq_stereo(eq2f,eq2l,eq2q);\n\n  pareq_stereo(eqf,eql,Q) = peak_eq_rm(eql,eqf,tpbt), peak_eq_rm(eql,eqf,tpbt)\n  with {\n    tpbt = wcT/sqrt(max(0,g)); // tan(PI*B/SR), B bw in Hz (Q^2 ~ g/4)\n    wcT = 2*PI*eqf/SR;  // peak frequency in rad/sample\n    g = db2linear(eql); // peak gain\n  };\n\n\n  eq1f = 315;\n\n  eq1l = 0;\n\n  eq1q = 3;\n\n  eq2f = 1500;\n\n  eq2l = 0.0;\n\n  eq2q = 3.0;\n\n  //out_group(x)  = x; //fdn_group(hgroup(\"[5] Output\", x));\n\n  dry_wet(x,y) = *(wet) + dry*x, *(wet) + dry*y with {\n    wet = 0.5*(drywet+1.0);\n    dry = 1.0-wet;\n  };\n\n  presence = hslider(\"[3]Proximity (InstrReverb)[style:knob][acc:1 1 -15 0 10]\", 0.2, 0, 1, 0.01) : smooth(0.999);\n\n  drywet = 1 - 2*presence;\n\n  out_level = *(gain),*(gain);\n\n  //gain = vslider(\"[5]Reverberation Volume[unit:dB][style:knob]\", -20, -70, 20, 0.1)\n  gain = -10 : +(6*presence) : db2linear : smooth(0.999);\n\n};\n",
      "public" : false,
      "staffPick" : true,
      "starCount" : 0,
      "title" : "Birds"
    },
    "-KQB1ZTngOAr5Mazgi7o" : {
      "authorUid" : "y4HBOnjabgX7RobHBJe9QQvW54Q2",
      "code" : "testing 1 2 3",
      "public" : false,
      "staffPick" : false,
      "starCount" : 0,
      "title" : "Untitled"
    },
    "-KQDwqxuFDy1R8R2-5De" : {
      "code" : "process = vgroup(\"Kisana\",environment{declare name    \"Kisana\";\ndeclare author  \"Yann Orlarey\";\n\n//Modifications GRAME July 2015\n\n/* ========= DESCRITPION =============\n\n- Kisana : 3-loops string instrument (based on Karplus-Strong)\n- Head = Silence\n- Tilt = High frequencies\n- Front = High + Medium frequencies\n- Bottom = High + Medium + Low frequencies\n- Left = Minimum brightness\n- Right = Maximum birghtness\n- Front = Long notes\n- Back = Short notes\n\n*/\n\nimport(\"music.lib\");\n\nKEY = 60;  // basic midi key\nNCY = 15;   // note cycle length\nCCY = 15;  // control cycle length\nBPS = 360;  // general tempo (beat per sec)\n\n\nprocess = kisana;\n\n\n//-------------------------------kisana----------------------------------\n// USAGE:  kisana : _,_;\n//     3-loops string instrument\n//-----------------------------------------------------------------------\n\nkisana = vgroup(\"Kisana\", harpe(C,11,48), harpe(C,11,60), (harpe(C,11,72) : *(1.5), *(1.5))\n  :>*(l))\n  with {\n    l = -20 : db2linear;//hslider(\"[1]Volume\",-20, -60, 0, 0.01) : db2linear;\n    C = hslider(\"[2]Brightness[acc:0 0 -10 0 10]\", 0.2, 0, 1, 0.01) : automat(BPS, CCY, 0.0);\n  };\n\n\n\n//----------------------------------Harpe--------------------------------\n// USAGE:  harpe(C,10,60) : _,_;\n//    C is the filter coefficient 0..1\n//     Build a N (10) strings harpe using a pentatonic scale\n//    based on midi key b (60)\n//    Each string is triggered by a specific\n//    position of the \"hand\"\n//-----------------------------------------------------------------------\nharpe(C,N,b) =   hand(b) <: par(i, N, position(i+1)\n              : string(C,Penta(b).degree2Hz(i), att, lvl)\n              : pan((i+0.5)/N) )\n           :> _,_\n  with {\n    att  = hslider(\"[3]Resonance[acc:2 0 -10 0 12]\", 4, 0.1, 10, 0.01);\n    hand(48) = vslider(\"h:[1]Instrument Hands/1 (Note %b)[unit:pk][acc:1 1 -10 0 14]\", 0, 0, N, 1) : int : automat(120, CCY, 0.0);\n    hand(60) = vslider(\"h:[1]Instrument Hands/2 (Note %b)[unit:pk][acc:1 1 -10 0 14]\", 2, 0, N, 1) : int : automat(240, CCY, 0.0);\n    hand(72) = vslider(\"h:[1]Instrument Hands/3 (Note %b)[unit:pk][acc:1 1 -10 0 10]\", 4, 0, N, 1) : int : automat(480, CCY, 0.0);\n    //lvl  = vslider(\"h:loop/level\", 0, 0, 6, 1) : int : automat(BPS, CCY, 0.0) : -(6) : db2linear;\n    lvl = 1;\n    pan(p) = _ <: *(sqrt(1-p)), *(sqrt(p));\n    position(a,x) = abs(x - a) < 0.5;\n    db2linear(x)  = pow(10, x/20.0);\n\n  };\n\n\n//----------------------------------Penta-------------------------------\n// Pentatonic scale with degree to midi and degree to Hz conversion\n// USAGE: Penta(60).degree2midi(3) ==> 67 midikey\n//        Penta(60).degree2Hz(4)   ==> 440 Hz\n//-----------------------------------------------------------------------\n\nPenta(key) = environment {\n\n  A4Hz = 440;\n\n  degree2midi(0) = key+0;\n  degree2midi(1) = key+2;\n  degree2midi(2) = key+4;\n  degree2midi(3) = key+7;\n  degree2midi(4) = key+9;\n  degree2midi(d) = degree2midi(d-5)+12;\n\n  degree2Hz(d) = A4Hz*semiton(degree2midi(d)-69) with { semiton(n) = 2.0^(n/12.0); };\n\n};\n\n\n//----------------------------------String-------------------------------\n// A karplus-strong string.\n//\n// USAGE: string(440Hz, 4s, 1.0, button(\"play\"))\n// or    button(\"play\") : string(440Hz, 4s, 1.0)\n//-----------------------------------------------------------------------\n\nstring(coef, freq, t60, level, trig) = noise*level\n              : *(trig : trigger(freq2samples(freq)))\n              : resonator(freq2samples(freq), att)\n  with {\n    resonator(d,a)  = (+ : @(d-1)) ~ (average : *(a));\n    average(x)    = (x*(1+coef)+x'*(1-coef))/2;\n    trigger(n)     = upfront : + ~ decay(n) : >(0.0);\n    upfront(x)     = (x-x') > 0.0;\n    decay(n,x)    = x - (x>0.0)/n;\n    freq2samples(f) = 44100.0/f;\n    att       = pow(0.001,1.0/(freq*t60)); // attenuation coefficient\n    random      = +(12345)~*(1103515245);\n    noise       = random/2147483647.0;\n  };\n\n\n}.process);\n",
      "public" : false,
      "staffPick" : true,
      "starCount" : 0,
      "title" : "Kisana"
    },
    "-KQDxCTlomgq9HTO7GDi" : {
      "code" : "declare name  \t\"Spooky Slide Whistle\";\ndeclare author  \"Michael Bylstra\";\n\n\nimport(\"math.lib\");\nimport(\"effect.lib\");\nimport(\"filter.lib\");\n\n\neq =\n\tlow_shelf(LL,FL) : peak_eq(LP,FP,BP) : high_shelf(LH,FH)\n\twith {\n\t\tLL = 0;\n\t\tFL = 200;\n\t\tLP = 0;\n\t\tFP = 440;\n\t\tQ = 40;\n\t\tBP = FP/Q;\n\t\tLH = -40;\n\t\tFH = hslider(\"Spooky Slide Whistle\", 3000,20,10000,1) : smooth(0.999);\n\t};\n\n\nclip(threshold) = asymetricClip(threshold, negativeThreshold)\n  with {\n    negativeThreshold = threshold * -1;\n  \tasymetricClip(top, bottom) = min(top) : max(bottom);\n  };\n\nhearingProtector = clip(0.1);\n\nfilterSection = eq : clip(0.5);\nmix = +;\nquietNoise = noise * 0.01;\nnoInputMixer = quietNoise : mix ~ eq;\n\nprocess = noInputMixer : hearingProtector;\n",
      "public" : false,
      "staffPick" : true,
      "starCount" : 0,
      "title" : "Spooky Slide Whistle"
    }
  }
}
