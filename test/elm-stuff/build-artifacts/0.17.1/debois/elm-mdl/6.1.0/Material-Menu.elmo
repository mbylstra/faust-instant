var _debois$elm_mdl$Material_Menu$toPx = function (_p0) {
	return A3(
		_elm_lang$core$Basics$flip,
		F2(
			function (x, y) {
				return A2(_elm_lang$core$Basics_ops['++'], x, y);
			}),
		'px',
		_elm_lang$core$Basics$toString(_p0));
};
var _debois$elm_mdl$Material_Menu$rect = F4(
	function (x, y, w, h) {
		return function (coords) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'rect(',
				A2(_elm_lang$core$Basics_ops['++'], coords, ')'));
		}(
			A2(
				_elm_lang$core$String$join,
				' ',
				A2(
					_elm_lang$core$List$map,
					_debois$elm_mdl$Material_Menu$toPx,
					_elm_lang$core$Native_List.fromArray(
						[x, y, w, h]))));
	});
var _debois$elm_mdl$Material_Menu$onClick = F2(
	function (decoder, action) {
		return A3(
			_elm_lang$html$Html_Events$onWithOptions,
			'click',
			_elm_lang$html$Html_Events$defaultOptions,
			A2(_elm_lang$core$Json_Decode$map, action, decoder));
	});
var _debois$elm_mdl$Material_Menu$outlineGeometry = F2(
	function (config, geometry) {
		return _elm_lang$core$Native_List.fromArray(
			[]);
	});
var _debois$elm_mdl$Material_Menu$icon = function (name) {
	return _debois$elm_mdl$Material_Options$set(
		function (config) {
			return _elm_lang$core$Native_Utils.update(
				config,
				{icon: name});
		});
};
var _debois$elm_mdl$Material_Menu$ripple = _debois$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{ripple: true});
	});
var _debois$elm_mdl$Material_Menu$constant = {transitionDurationSeconds: 0.3, transitionDurationFraction: 0.8, closeTimeout: 150};
var _debois$elm_mdl$Material_Menu$Model = F3(
	function (a, b, c) {
		return {items: a, animationState: b, geometry: c};
	});
var _debois$elm_mdl$Material_Menu$Item = F3(
	function (a, b, c) {
		return {divider: a, enabled: b, html: c};
	});
var _debois$elm_mdl$Material_Menu$Config = F3(
	function (a, b, c) {
		return {alignment: a, ripple: b, icon: c};
	});
var _debois$elm_mdl$Material_Menu$Closing = {ctor: 'Closing'};
var _debois$elm_mdl$Material_Menu$Opened = {ctor: 'Opened'};
var _debois$elm_mdl$Material_Menu$Opening = {ctor: 'Opening'};
var _debois$elm_mdl$Material_Menu$Idle = {ctor: 'Idle'};
var _debois$elm_mdl$Material_Menu$defaultModel = {items: _elm_lang$core$Dict$empty, animationState: _debois$elm_mdl$Material_Menu$Idle, geometry: _elm_lang$core$Maybe$Nothing};
var _debois$elm_mdl$Material_Menu$Ripple = F2(
	function (a, b) {
		return {ctor: 'Ripple', _0: a, _1: b};
	});
var _debois$elm_mdl$Material_Menu$Tick = {ctor: 'Tick'};
var _debois$elm_mdl$Material_Menu$Close = function (a) {
	return {ctor: 'Close', _0: a};
};
var _debois$elm_mdl$Material_Menu$update = F2(
	function (action, model) {
		var _p1 = action;
		switch (_p1.ctor) {
			case 'Open':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							animationState: function () {
								var _p2 = model.animationState;
								if (_p2.ctor === 'Opened') {
									return _debois$elm_mdl$Material_Menu$Opened;
								} else {
									return _debois$elm_mdl$Material_Menu$Opening;
								}
							}(),
							geometry: _elm_lang$core$Maybe$Just(_p1._0)
						}),
					_1: _debois$elm_mdl$Material_Helpers$cssTransitionStep(_debois$elm_mdl$Material_Menu$Tick)
				};
			case 'Tick':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{animationState: _debois$elm_mdl$Material_Menu$Opened}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Close':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{animationState: _debois$elm_mdl$Material_Menu$Idle, geometry: _elm_lang$core$Maybe$Nothing}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Select':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{animationState: _debois$elm_mdl$Material_Menu$Closing}),
					_1: A2(
						_debois$elm_mdl$Material_Helpers$delay,
						_debois$elm_mdl$Material_Menu$constant.closeTimeout,
						_debois$elm_mdl$Material_Menu$Close(_p1._1))
				};
			default:
				var _p4 = _p1._0;
				var _p3 = A2(
					_debois$elm_mdl$Material_Ripple$update,
					_p1._1,
					A2(
						_elm_lang$core$Maybe$withDefault,
						_debois$elm_mdl$Material_Ripple$model,
						A2(_elm_lang$core$Dict$get, _p4, model.items)));
				var model$ = _p3._0;
				var effects = _p3._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							items: A3(_elm_lang$core$Dict$insert, _p4, model$, model.items)
						}),
					_1: A2(
						_elm_lang$core$Platform_Cmd$map,
						_debois$elm_mdl$Material_Menu$Ripple(_p4),
						effects)
				};
		}
	});
var _debois$elm_mdl$Material_Menu$Select = F2(
	function (a, b) {
		return {ctor: 'Select', _0: a, _1: b};
	});
var _debois$elm_mdl$Material_Menu$Open = function (a) {
	return {ctor: 'Open', _0: a};
};
var _debois$elm_mdl$Material_Menu$TopRight = {ctor: 'TopRight'};
var _debois$elm_mdl$Material_Menu$topRight = _debois$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{alignment: _debois$elm_mdl$Material_Menu$TopRight});
	});
var _debois$elm_mdl$Material_Menu$TopLeft = {ctor: 'TopLeft'};
var _debois$elm_mdl$Material_Menu$topLeft = _debois$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{alignment: _debois$elm_mdl$Material_Menu$TopLeft});
	});
var _debois$elm_mdl$Material_Menu$makeItem = F5(
	function (lift, config, model, n, item) {
		var height = A2(
			_elm_lang$core$Maybe$withDefault,
			0,
			A2(
				_elm_lang$core$Maybe$map,
				function (geometry) {
					return geometry.menu.bounds.height;
				},
				model.geometry));
		var offsetHeight = function (n) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				0,
				A3(
					_elm_lang$core$Basics$flip,
					_elm_lang$core$Maybe$andThen,
					function (_p5) {
						return A2(
							_elm_lang$core$Array$get,
							n - 1,
							function (_) {
								return _.offsetHeights;
							}(_p5));
					},
					model.geometry));
		};
		var offsetTop = function (n) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				0,
				A3(
					_elm_lang$core$Basics$flip,
					_elm_lang$core$Maybe$andThen,
					function (_p6) {
						return A2(
							_elm_lang$core$Array$get,
							n - 1,
							function (_) {
								return _.offsetTops;
							}(_p6));
					},
					model.geometry));
		};
		var transitionDuration = _debois$elm_mdl$Material_Menu$constant.transitionDurationSeconds * _debois$elm_mdl$Material_Menu$constant.transitionDurationFraction;
		var itemDelay = (_elm_lang$core$Native_Utils.eq(config.alignment, _debois$elm_mdl$Material_Menu$TopLeft) || _elm_lang$core$Native_Utils.eq(config.alignment, _debois$elm_mdl$Material_Menu$TopRight)) ? A3(
			_elm_lang$core$Basics$flip,
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['++'], x, y);
				}),
			's',
			_elm_lang$core$Basics$toString(
				(((height - offsetTop(n)) - offsetHeight(n)) / height) * transitionDuration)) : A3(
			_elm_lang$core$Basics$flip,
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['++'], x, y);
				}),
			's',
			_elm_lang$core$Basics$toString(
				(offsetTop(n) / height) * transitionDuration));
		return A4(
			_debois$elm_mdl$Material_Options$styled$,
			_elm_lang$html$Html$li,
			_elm_lang$core$Native_List.fromArray(
				[
					_debois$elm_mdl$Material_Options$cs('mdl-menu__item'),
					A2(
					_debois$elm_mdl$Material_Options$when,
					A2(_debois$elm_mdl$Material_Options$css, 'transition-delay', itemDelay),
					_elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Opening) || _elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Opened)),
					A2(
					_debois$elm_mdl$Material_Options$when,
					_debois$elm_mdl$Material_Options$cs('mdl-js-ripple-effect'),
					config.ripple),
					A2(
					_debois$elm_mdl$Material_Options$when,
					_debois$elm_mdl$Material_Options$cs('mdl-menu__item--full-bleed-divider'),
					item.divider)
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					item.enabled ? A2(
					_debois$elm_mdl$Material_Menu$onClick,
					_debois$elm_mdl$Material_Menu_Geometry$decode$,
					function (_p7) {
						return lift(
							A2(_debois$elm_mdl$Material_Menu$Select, n, _p7));
					}) : A2(_elm_lang$html$Html_Attributes$attribute, 'disabled', 'disabled'),
					A2(
					_elm_lang$html$Html_Attributes$property,
					'tabindex',
					_elm_lang$core$Json_Encode$string('-1'))
				]),
			config.ripple ? _elm_lang$core$Native_List.fromArray(
				[
					item.html,
					A2(
					_elm_lang$html$Html_App$map,
					function (_p8) {
						return lift(
							A2(_debois$elm_mdl$Material_Menu$Ripple, n, _p8));
					},
					A2(
						_debois$elm_mdl$Material_Ripple$view,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('mdl-menu__item-ripple-container')
							]),
						A2(
							_elm_lang$core$Maybe$withDefault,
							_debois$elm_mdl$Material_Ripple$model,
							A2(_elm_lang$core$Dict$get, n, model.items))))
				]) : _elm_lang$core$Native_List.fromArray(
				[item.html]));
	});
var _debois$elm_mdl$Material_Menu$BottomRight = {ctor: 'BottomRight'};
var _debois$elm_mdl$Material_Menu$bottomRight = _debois$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{alignment: _debois$elm_mdl$Material_Menu$BottomRight});
	});
var _debois$elm_mdl$Material_Menu$BottomLeft = {ctor: 'BottomLeft'};
var _debois$elm_mdl$Material_Menu$defaultConfig = {alignment: _debois$elm_mdl$Material_Menu$BottomLeft, ripple: false, icon: 'more_vert'};
var _debois$elm_mdl$Material_Menu$bottomLeft = _debois$elm_mdl$Material_Options$set(
	function (config) {
		return _elm_lang$core$Native_Utils.update(
			config,
			{alignment: _debois$elm_mdl$Material_Menu$BottomLeft});
	});
var _debois$elm_mdl$Material_Menu$containerGeometry = F2(
	function (config, geometry) {
		return _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_debois$elm_mdl$Material_Options$css,
				'width',
				_debois$elm_mdl$Material_Menu$toPx(geometry.menu.bounds.width)),
				A2(
				_debois$elm_mdl$Material_Options$css,
				'height',
				_debois$elm_mdl$Material_Menu$toPx(geometry.menu.bounds.height)),
				(_elm_lang$core$Native_Utils.eq(config.alignment, _debois$elm_mdl$Material_Menu$BottomRight) || _elm_lang$core$Native_Utils.eq(config.alignment, _debois$elm_mdl$Material_Menu$BottomLeft)) ? A2(
				_debois$elm_mdl$Material_Options$css,
				'top',
				_debois$elm_mdl$Material_Menu$toPx(geometry.button.offsetTop + geometry.button.offsetHeight)) : _debois$elm_mdl$Material_Options$nop,
				function () {
				if (_elm_lang$core$Native_Utils.eq(config.alignment, _debois$elm_mdl$Material_Menu$BottomRight) || _elm_lang$core$Native_Utils.eq(config.alignment, _debois$elm_mdl$Material_Menu$TopRight)) {
					var right = function (e) {
						return e.bounds.left + e.bounds.width;
					};
					return A2(
						_debois$elm_mdl$Material_Options$css,
						'right',
						_debois$elm_mdl$Material_Menu$toPx(
							right(geometry.container) - right(geometry.menu)));
				} else {
					return _debois$elm_mdl$Material_Options$nop;
				}
			}(),
				function () {
				if (_elm_lang$core$Native_Utils.eq(config.alignment, _debois$elm_mdl$Material_Menu$TopLeft) || _elm_lang$core$Native_Utils.eq(config.alignment, _debois$elm_mdl$Material_Menu$TopRight)) {
					var bottom = geometry.container.bounds.top + geometry.container.bounds.height;
					return A2(
						_debois$elm_mdl$Material_Options$css,
						'bottom',
						_debois$elm_mdl$Material_Menu$toPx(bottom - geometry.button.bounds.top));
				} else {
					return _debois$elm_mdl$Material_Options$nop;
				}
			}(),
				(_elm_lang$core$Native_Utils.eq(config.alignment, _debois$elm_mdl$Material_Menu$TopLeft) || _elm_lang$core$Native_Utils.eq(config.alignment, _debois$elm_mdl$Material_Menu$BottomLeft)) ? A2(
				_debois$elm_mdl$Material_Options$css,
				'left',
				_debois$elm_mdl$Material_Menu$toPx(geometry.menu.offsetLeft)) : _debois$elm_mdl$Material_Options$nop
			]);
	});
var _debois$elm_mdl$Material_Menu$view$ = F4(
	function (lift, model, properties, items) {
		var summary = A2(_debois$elm_mdl$Material_Options$collect, _debois$elm_mdl$Material_Menu$defaultConfig, properties);
		var config = summary.config;
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html_App$map,
					lift,
					A4(
						_debois$elm_mdl$Material_Options$styled$,
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_debois$elm_mdl$Material_Options$cs('mdl-button'),
								_debois$elm_mdl$Material_Options$cs('mdl-js-button'),
								_debois$elm_mdl$Material_Options$cs('mdl-button--icon')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_debois$elm_mdl$Material_Menu$onClick,
								_debois$elm_mdl$Material_Menu_Geometry$decode,
								_elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Opened) ? _debois$elm_mdl$Material_Menu$Close : _debois$elm_mdl$Material_Menu$Open)
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_debois$elm_mdl$Material_Icon$view,
								config.icon,
								_elm_lang$core$Native_List.fromArray(
									[
										_debois$elm_mdl$Material_Options$cs('material-icons'),
										A2(_debois$elm_mdl$Material_Options$css, 'pointer-events', 'none')
									]))
							]))),
					A3(
					_debois$elm_mdl$Material_Options$styled,
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_debois$elm_mdl$Material_Options$cs('mdl-menu__container'),
							_debois$elm_mdl$Material_Options$cs('is-upgraded'),
							A2(
							_debois$elm_mdl$Material_Options$when,
							_debois$elm_mdl$Material_Options$cs('is-visible'),
							_elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Opened) || _elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Closing)),
							A2(
							_elm_lang$core$Maybe$withDefault,
							_debois$elm_mdl$Material_Options$nop,
							A2(
								_elm_lang$core$Maybe$map,
								function (_p9) {
									return _debois$elm_mdl$Material_Options$many(
										A2(_debois$elm_mdl$Material_Menu$containerGeometry, config, _p9));
								},
								model.geometry))
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							A3(
							_debois$elm_mdl$Material_Options$styled,
							_elm_lang$html$Html$div,
							_elm_lang$core$Native_List.fromArray(
								[
									_debois$elm_mdl$Material_Options$cs('mdl-menu__outline'),
									_debois$elm_mdl$Material_Options$many(
									A2(
										_elm_lang$core$Maybe$withDefault,
										_elm_lang$core$Native_List.fromArray(
											[]),
										A2(
											_elm_lang$core$Maybe$map,
											function (geometry) {
												return _elm_lang$core$Native_List.fromArray(
													[
														A2(
														_debois$elm_mdl$Material_Options$css,
														'width',
														_debois$elm_mdl$Material_Menu$toPx(geometry.menu.bounds.width)),
														A2(
														_debois$elm_mdl$Material_Options$css,
														'height',
														_debois$elm_mdl$Material_Menu$toPx(geometry.menu.bounds.height))
													]);
											},
											model.geometry))),
									function () {
									var _p10 = config.alignment;
									switch (_p10.ctor) {
										case 'BottomLeft':
											return _debois$elm_mdl$Material_Options$cs('mdl-menu--bottom-left');
										case 'BottomRight':
											return _debois$elm_mdl$Material_Options$cs('mdl-menu--bottom-right');
										case 'TopLeft':
											return _debois$elm_mdl$Material_Options$cs('mdl-menu--top-left');
										default:
											return _debois$elm_mdl$Material_Options$cs('mdl-menu--top-right');
									}
								}()
								]),
							_elm_lang$core$Native_List.fromArray(
								[])),
							A3(
							_debois$elm_mdl$Material_Options$styled,
							_elm_lang$html$Html$ul,
							_elm_lang$core$Native_List.fromArray(
								[
									_debois$elm_mdl$Material_Options$cs('mdl-menu'),
									_debois$elm_mdl$Material_Options$cs('mdl-js-menu'),
									function () {
									var _p11 = config.alignment;
									switch (_p11.ctor) {
										case 'BottomLeft':
											return _debois$elm_mdl$Material_Options$cs('mdl-menu--bottom-left');
										case 'BottomRight':
											return _debois$elm_mdl$Material_Options$cs('mdl-menu--bottom-right');
										case 'TopLeft':
											return _debois$elm_mdl$Material_Options$cs('mdl-menu--top-left');
										default:
											return _debois$elm_mdl$Material_Options$cs('mdl-menu--top-right');
									}
								}(),
									A2(
									_debois$elm_mdl$Material_Options$when,
									_debois$elm_mdl$Material_Options$cs('is-animating'),
									_elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Opening) || _elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Closing)),
									A2(
									_elm_lang$core$Maybe$withDefault,
									_debois$elm_mdl$Material_Options$nop,
									A2(
										_elm_lang$core$Maybe$map,
										function (geometry) {
											var height = geometry.menu.bounds.height;
											var width = geometry.menu.bounds.width;
											return A2(
												_debois$elm_mdl$Material_Options$css,
												'clip',
												function () {
													if (_elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Opened) || _elm_lang$core$Native_Utils.eq(model.animationState, _debois$elm_mdl$Material_Menu$Closing)) {
														return A4(_debois$elm_mdl$Material_Menu$rect, 0, width, height, 0);
													} else {
														var _p12 = config.alignment;
														switch (_p12.ctor) {
															case 'BottomRight':
																return A4(_debois$elm_mdl$Material_Menu$rect, 0, width, 0, width);
															case 'TopLeft':
																return A4(_debois$elm_mdl$Material_Menu$rect, height, 0, height, 0);
															case 'TopRight':
																return A4(_debois$elm_mdl$Material_Menu$rect, height, width, height, width);
															default:
																return '';
														}
													}
												}());
										},
										model.geometry))
								]),
							A3(
								_elm_lang$core$List$map2,
								A3(_debois$elm_mdl$Material_Menu$makeItem, lift, config, model),
								_elm_lang$core$Native_List.range(
									1,
									_elm_lang$core$List$length(items)),
								items))
						]))
				]));
	});
var _debois$elm_mdl$Material_Menu$view = _debois$elm_mdl$Material_Menu$view$(_elm_lang$core$Basics$identity);
var _debois$elm_mdl$Material_Menu$render = A5(
	_debois$elm_parts$Parts$create,
	_debois$elm_mdl$Material_Menu$view$,
	_debois$elm_mdl$Material_Menu$update,
	function (_) {
		return _.menu;
	},
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.update(
				y,
				{menu: x});
		}),
	_debois$elm_mdl$Material_Menu$defaultModel);
