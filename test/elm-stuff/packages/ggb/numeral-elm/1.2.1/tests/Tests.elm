import Numeral

import Html exposing(..)
import ElmTest exposing (..)
import String

numbers =
  [
    (10000,"0,0.0000","10,000.0000"),
    (10000.23,"0,0","10,000"),
    (-10000,"0,0.0","-10,000.0"),
    (10000.1234,"0.000","10000.123"),
    (10000,"0[.]00","10000"),
    (10000.1,"0[.]00","10000.10"),
    (10000.123,"0[.]00","10000.12"),
    (10000.456,"0[.]00","10000.46"),
    (10000.001,"0[.]00","10000"),
    (10000.45,"0[.]00[0]","10000.45"),
    (10000.456,"0[.]00[0]","10000.456"),
    (-10000,"(0,0.0000)","(10,000.0000)"),
    (-12300,"+0,0.0000","-12,300.0000"),
    (1230,"+0,0","+1,230"),
    (100.78, "0", "101"),
    (100.28, "0", "100"),
    (1.932,"0.0","1.9"),
    (1.9687,"0","2"),
    (1.9687,"0.0","2.0"),
    (-0.23,".00","-.23"),
    (-0.23,"(.00)","(.23)"),
    (0.23,"0.00000","0.23000"),
    (0.67,"0.0[0000]","0.67"),
    (2000000000,"0.0a","2.0b"),
    (1230974,"0.0a","1.2m"),
    (1460,"0a","1k"),
    (-104000,"0 a","-104 k"),
    (1,"0o","1st"),
    (52,"0 o","52 nd"),
    (23,"0o","23rd"),
    (100,"0o","100th"),

    -- specified abbreviations
    (-5444333222111.0, "0,0 aK", "-5,444,333,222 k"),
    (-5444333222111.0, "0,0 aM", "-5,444,333 m"),
    (-5444333222111.0, "0,0 aB", "-5,444 b"),
    (-5444333222111.0, "0,0 aT", "-5 t")
  ]


currency =
  [
    (1000.234,"$0,0.00","$1,000.23"),
    (1001,"$ 0,0.[00]","$ 1,001"),
    (1000.234,"0,0.00 $","1,000.23 $"),
    (-1000.234,"($0,0)","($1,000)"),
    (-1000.234,"(0,0$)","(1,000$)"),
    (-1000.234,"$0.00","-$1000.23"),
    (1230974,"($0.00 a)","$1.23 m"),

    -- test symbol position before negative sign / open parens
    (-1000.234,"$ (0,0)","$ (1,000)"),
    (-1000.234,"$(0,0)","$(1,000)"),
    (-1000.234,"$ (0,0.00)","$ (1,000.23)"),
    (-1000.234,"$(0,0.00)","$(1,000.23)"),
    (-1000.238,"$(0,0.00)","$(1,000.24)"),
    (-1000.234,"$-0,0","$-1,000"),
    (-1000.234,"$ -0,0","$ -1,000"),

    (1000.234,"$ (0,0)","$ 1,000"),
    (1000.234,"$(0,0)","$1,000"),
    (1000.234,"$ (0,0.00)","$ 1,000.23"),
    (1000.234,"$(0,0.00)","$1,000.23"),
    (1000.238,"$(0,0.00)","$1,000.24"),
    (1000.234,"$-0,0)","$1,000"),
    (1000.234,"$ -0,0","$ 1,000")
  ]


bytes =
  [
    (100,"0b","100B"),
    (1024*2,"0 b","2 KB"),
    (1024*1024*5,"0b","5MB"),
    (1024*1024*1024*7.343,"0.[0] b","7.3 GB"),
    (1024*1024*1024*1024*3.1536544,"0.000b","3.154TB"),
    (1024*1024*1024*1024*1024*2.953454534534,"0b","3PB")
  ]


percentages =
  [
    (1,"0%","100%"),
    (0.974878234,"0.000%","97.488%"),
    (-0.43,"0 %","-43 %"),
    (0.43,"(0.00[0]%)","43.00%")
  ]


times =
  [
    (25,"00:00:00","0:00:25"),
    (238,"00:00:00","0:03:58"),
    (63846,"00:00:00","17:44:06")
  ]

{-
rounding =
  [
    -- value, format string, expected w/ floor, expected w/ ceil
    (2280002, "0.00a", "2.28m", "2.29m"),
    (10000.23,"0,0","10,000", "10,001"),
    (1000.234,"$0,0.00","$1,000.23", "$1,000.24"),
    (0.974878234,"0.000%","97.487%","97.488%"),
    (-0.433,"0 %","-44 %", "-43 %")
  ]
-}
rounding =
  [
    (2.385, "0,0.00", "2.39"),
    (28.885, "0,0.00", "28.89")
  ]


myAssert (value, format, result) =
  defaultTest (assertEqual result (Numeral.format format value))


numbersTest =
  List.map myAssert numbers
  |> suite "Tests for numbers"


currencyTest =
  List.map myAssert currency
  |> suite "Tests for currency"


bytesTest =
  List.map myAssert bytes
  |> suite "Tests for bytes"


percentagesTest =
  List.map myAssert percentages
  |> suite "Tests for percentages"


timeTest =
  List.map myAssert times
  |> suite "Tests for time"


roundingTest =
  List.map myAssert rounding
  |> suite "Tests for rounding"


tests : String
tests =
  suite "Numeral"
      [ numbersTest
      , currencyTest
      , bytesTest
      , percentagesTest
      , timeTest
      , roundingTest
      ]
  |> stringRunner

main : Html String
main =
  let
    lines = String.lines tests
  in
    div [ ] (List.map (\s -> line s) lines)

line : String -> Html String
line s =
  div [ ] [
    text s,
    br [ ] [ ]
  ]
